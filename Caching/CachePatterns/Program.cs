using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using CachePatterns.Data;
using CachePatterns.Models;
using CachePatterns.Patterns;

namespace CachePatterns;

class Program
{
    static async Task Main(string[] args)
    {
        // Configura√ß√£o de depend√™ncias
        var services = new ServiceCollection();
        services.AddMemoryCache();
        services.AddLogging(builder => builder.AddConsole());
        services.AddSingleton<IRepository<Produto>, ProdutoRepository>();
        services.AddSingleton<IRepository<Usuario>, UsuarioRepository>();
        
        var serviceProvider = services.BuildServiceProvider();
        var cache = serviceProvider.GetRequiredService<IMemoryCache>();
        var produtoRepo = serviceProvider.GetRequiredService<IRepository<Produto>>();
        var usuarioRepo = serviceProvider.GetRequiredService<IRepository<Usuario>>();

        Console.WriteLine("=== DEMONSTRA√á√ÉO DOS PADR√ïES DE CACHE ===\n");

        // Demonstra√ß√£o de cada padr√£o
        await DemonstrateCacheAside(cache, produtoRepo);
        await DemonstrateWriteThrough(cache, produtoRepo);
        await DemonstrateWriteBehind(cache, produtoRepo);
        await DemonstrateReadThrough(cache, produtoRepo);
        await DemonstrateRefreshAhead(cache, produtoRepo);
        await DemonstrateFullCache(cache, produtoRepo, usuarioRepo);
        await DemonstrateNearCache(cache, produtoRepo);
        await DemonstrateTieredCache(cache, produtoRepo);

        Console.WriteLine("\n=== DEMONSTRA√á√ÉO CONCLU√çDA ===");
    }

    static async Task DemonstrateCacheAside(IMemoryCache cache, IRepository<Produto> repository)
    {
        Console.WriteLine("üîç === CACHE-ASIDE PATTERN ===");
        var service = new CacheAsideService(cache, repository);

        // Primeira busca - cache miss
        await service.GetProdutoAsync(1);
        
        // Segunda busca - cache hit
        await service.GetProdutoAsync(1);
        
        // Simula√ß√£o de atualiza√ß√£o
        var produto = new Produto { Id = 1, Nome = "Notebook Dell Atualizado", Preco = 2600.00m, Categoria = "Eletr√¥nicos" };
        await service.SaveProdutoAsync(produto);
        
        // Busca ap√≥s atualiza√ß√£o - cache miss (foi invalidado)
        await service.GetProdutoAsync(1);
        
        Console.WriteLine("‚úÖ Cache-Aside demonstrado\n");
    }

    static async Task DemonstrateWriteThrough(IMemoryCache cache, IRepository<Produto> repository)
    {
        Console.WriteLine("üîÑ === WRITE-THROUGH PATTERN ===");
        var service = new WriteThroughService(cache, repository);

        // Busca inicial
        await service.GetProdutoAsync(2);
        
        // Atualiza√ß√£o simult√¢nea em cache e DB
        var produto = new Produto { Id = 2, Nome = "Mouse Logitech Atualizado", Preco = 180.00m, Categoria = "Perif√©ricos" };
        await service.SaveProdutoAsync(produto);
        
        // Verifica se a atualiza√ß√£o est√° no cache
        await service.GetProdutoAsync(2);
        
        Console.WriteLine("‚úÖ Write-Through demonstrado\n");
    }

    static async Task DemonstrateWriteBehind(IMemoryCache cache, IRepository<Produto> repository)
    {
        Console.WriteLine("‚è∞ === WRITE-BEHIND PATTERN ===");
        var service = new WriteBehindService(cache, repository);

        // Busca inicial
        await service.GetProdutoAsync(3);
        
        // Salvamento r√°pido no cache (ass√≠ncrono no DB)
        var produto = new Produto { Id = 3, Nome = "Teclado Mec√¢nico Premium", Preco = 350.00m, Categoria = "Perif√©ricos" };
        await service.SaveProdutoAsync(produto);
        
        // Dado est√° imediatamente dispon√≠vel no cache
        await service.GetProdutoAsync(3);
        
        Console.WriteLine("‚è≥ Aguardando flush autom√°tico para o banco...");
        await Task.Delay(6000); // Aguarda o timer de flush
        
        // For√ßa flush manual
        await service.ForceFlushAsync();
        
        service.Dispose();
        Console.WriteLine("‚úÖ Write-Behind demonstrado\n");
    }

    static async Task DemonstrateReadThrough(IMemoryCache cache, IRepository<Produto> repository)
    {
        Console.WriteLine("üìñ === READ-THROUGH PATTERN ===");
        var service = new ReadThroughService(cache, repository);

        // Read-through autom√°tico com GetOrCreateAsync
        await service.GetProdutoAsync(4);
        
        // Cache hit na segunda chamada
        await service.GetProdutoAsync(4);
        
        // Demonstra√ß√£o da vers√£o manual
        await service.GetProdutoManualAsync(5);
        await service.GetProdutoManualAsync(5);
        
        Console.WriteLine("‚úÖ Read-Through demonstrado\n");
    }

    static async Task DemonstrateRefreshAhead(IMemoryCache cache, IRepository<Produto> repository)
    {
        Console.WriteLine("üîÑ === REFRESH-AHEAD PATTERN ===");
        var service = new RefreshAheadService(cache, repository);

        // Carrega dados cr√≠ticos
        await service.PreloadCriticalDataAsync(new[] { 1, 2, 3 });
        
        // Busca normal
        await service.GetProdutoAsync(1);
        
        // For√ßa refresh manual
        await service.ForceRefreshAsync(1);
        
        Console.WriteLine("‚è≥ Timer de refresh em background est√° ativo...");
        await Task.Delay(2000);
        
        service.Dispose();
        Console.WriteLine("‚úÖ Refresh-Ahead demonstrado\n");
    }

    static async Task DemonstrateFullCache(IMemoryCache cache, IRepository<Produto> produtoRepo, IRepository<Usuario> usuarioRepo)
    {
        Console.WriteLine("üóÑÔ∏è === FULL CACHE PATTERN ===");
        var service = new FullCacheService(cache, produtoRepo, usuarioRepo);

        // Inicializa√ß√£o completa do cache
        await service.InitializeAsync();
        
        // Buscas que sempre v√™m do cache
        await service.GetProdutoAsync(1);
        await service.GetProdutoAsync(2);
        
        // Buscas por √≠ndices
        var eletronicos = await service.GetProdutosPorCategoriaAsync("Eletr√¥nicos");
        Console.WriteLine($"üîç Encontrados {eletronicos.Count} produtos eletr√¥nicos");
        
        var produtosCaros = await service.GetProdutosPorFaixaPrecoAsync("alto");
        Console.WriteLine($"üîç Encontrados {produtosCaros.Count} produtos na faixa alta");
        
        // Busca configura√ß√£o
        var taxaImposto = await service.GetConfiguracaoAsync("taxa_imposto");
        Console.WriteLine($"‚öôÔ∏è Taxa de imposto: {taxaImposto?.Valor}");
        
        service.Dispose();
        Console.WriteLine("‚úÖ Full Cache demonstrado\n");
    }

    static async Task DemonstrateNearCache(IMemoryCache cache, IRepository<Produto> repository)
    {
        Console.WriteLine("üåê === NEAR CACHE PATTERN ===");
        
        // Simula cache remoto com outra inst√¢ncia de MemoryCache
        var remoteCache = new MemoryCache(new MemoryCacheOptions());
        var service = new NearCacheService(cache, remoteCache, repository);

        // Primeira busca - vai at√© o banco e popula ambos os caches
        await service.GetProdutoAsync(1);
        
        // Segunda busca - hit no cache local (L1)
        await service.GetProdutoAsync(1);
        
        // Limpa cache local para simular L2 hit
        service.ClearLocalCache();
        await service.GetProdutoAsync(1); // Hit no L2, promove para L1
        
        // Atualiza√ß√£o
        var produto = new Produto { Id = 1, Nome = "Produto Atualizado", Preco = 1000.00m, Categoria = "Eletr√¥nicos" };
        await service.SaveProdutoAsync(produto);
        
        // Estat√≠sticas
        var stats = service.GetStats();
        Console.WriteLine($"üìä Inst√¢ncia: {stats.InstanceId}, Cache local: {stats.LocalCacheSize} itens");
        
        service.Dispose();
        Console.WriteLine("‚úÖ Near Cache demonstrado\n");
    }

    static async Task DemonstrateTieredCache(IMemoryCache cache, IRepository<Produto> repository)
    {
        Console.WriteLine("üéØ === TIERED CACHE PATTERN ===");
        
        var l2Cache = new MemoryCache(new MemoryCacheOptions());
        var service = new TieredCacheService(cache, l2Cache, repository);

        // Aquecimento do cache
        await service.WarmUpCacheAsync(new[] { 1, 2, 3 });
        
        // Demonstra√ß√£o de busca em lote
        var produtos = await service.GetProdutosBatchAsync(new[] { 1, 2, 3, 4, 5 });
        Console.WriteLine($"üì¶ Busca em lote retornou {produtos.Count} produtos");
        
        // V√°rias buscas para demonstrar hits em diferentes n√≠veis
        await service.GetProdutoAsync(1); // L1 hit
        await service.GetProdutoAsync(2); // L1 hit
        await service.GetProdutoAsync(6); // Miss em todos os n√≠veis
        
        // Refresh manual
        await service.RefreshItemAsync(1);
        
        // M√©tricas finais
        var metrics = service.GetMetrics();
        Console.WriteLine($"üìà M√©tricas finais:");
        Console.WriteLine($"   Total de requisi√ß√µes: {metrics.TotalRequests}");
        Console.WriteLine($"   Taxa de hit L1: {metrics.L1HitRate:F2}%");
        Console.WriteLine($"   Taxa de hit L2: {metrics.L2HitRate:F2}%");
        Console.WriteLine($"   Taxa de hit geral: {metrics.CacheHitRate:F2}%");
        
        service.Dispose();
        Console.WriteLine("‚úÖ Tiered Cache demonstrado\n");
    }
}
